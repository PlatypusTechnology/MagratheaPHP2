<?php

namespace Magrathea2\Bootstrap;
use Magrathea2\Admin\Models\AdminConfigControl;
use Magrathea2\Exceptions\MagratheaException;
use Magrathea2\MagratheaPHP;
use Magrathea2\ConfigFile;
use Exception;
use Magrathea2\Admin\ObjectManager;

use function Magrathea2\now;
use function Magrathea2\p_r;

#######################################################################################
####
####    MAGRATHEA PHP2
####    v. 2.0
####    Magrathea by Paulo Henrique Martins
####    Platypus technology
####    Bootstrap Start created: 2022-12 by Paulo Martins
####
#######################################################################################

/**
 * Class for handling and code generations
 */
class CodeManager extends \Magrathea2\Singleton { 

	/**
	 * @param string $object 	object name
	 * @return array files that will be generated ["file-name", "file-desc", "gen-function"]
	*/
	public function GetFileList($object): array {
		return [
			"model-base" => [
				"file-name" => $object."ModelBase.php",
				"file-desc" => $object." Base Code",
				"gen-function" => "GetCodeForObjectBase"
			],
			"control-base" => [
				"file-name" => $object."ControlBase.php",
				"file-desc" => $object." Control Base Code",
				"gen-function" => "GetCodeForObjectControlBase"
			],
			"model" => [
				"file-name" => $object."Model.php",
				"file-desc" => $object." Model Code",
				"gen-function" => "GetCodeForObject"
			],
			"control" => [
				"file-name" => $object."ModelControl.php",
				"file-desc" => $object." Model Control Code",
				"gen-function" => "GetCodeForControl"
			],
		];
	}

	/**
	 * comment for the header of the file
	 * @return string
	 */
	private function GetCommentAlert(): string {
		$msg = "";
		$msg .= "## FILE GENERATED BY MAGRATHEA.\n";
		$msg .= "## This file was automatically generated and changes can be overwritten through the admin\n";
		$msg .= "## -- date of creation: [".now()."]\n";
		$msg .= "\n";
		return $msg;
	}

	/**
	 * Gets the data that will be used to create the code
	 * @return array		array like [ "success", "data", "errors" ]
	 */
	public function GetCodeCreationData(): array {
		$rs = [];
		$success = true;
		$errors = [];
		$configControl = new AdminConfigControl();
		$path = $configControl->GetValueByKey("code_path");
		if(empty($path)) $path = MagratheaPHP::Instance()->appRoot;
		$structure = $configControl->GetValueByKey("code_structure");
		if (empty($structure)) {
			$success = false;
			array_push($errors, "Structure Type is empty or invalid");
		}
		$namespace = $configControl->GetValueByKey("code_namespace");
		if (empty($namespace)) {
			$success = false;
			array_push($errors, "namespace is empty");
		}
		$rs = [
			"success" => $success,
			"data" => [
				"code-path" => $path,
				"code-structure" => $structure,
				"code-namespace" => $namespace,
			]
		];
		if(!$success) {
			$rs["errors"] = $errors;
		}
		return $rs;
	}

	/**
	 * Generate Base Code for object
	 * @param 	string 		$object			object name
	 * @param 	array			$data				array with magrathea_conf data for object
	 * @param 	string 		$namespace	(optional) namespace for class code
	 * @return 	string		code
	 */
	private function GenerateBaseCodeForObject($object, $data, $namespace=null) {
		$code = "";
		$obj_fields = array();
		foreach($data as $key => $item){
			if( substr($key, -6) == "_alias" ){
				$field_name = substr($key, 0, -6);
				if( $field_name == "created_at" || $field_name == "updated_at" ) continue;
				array_push($obj_fields, $field_name);
			}
		}

		$relations = array();
		$relations = ObjectManager::Instance()->GetRelationsByObject($object);
		$relations_properties = "";
		$relations_functions = "";
		$relations_autoload = array();
		$autoload_objs = array();
		foreach($relations as $rel){
			$relations_properties .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = null;\n";
			$relations_properties .= "\t\t\$this->relations[\"methods\"][\"".$rel["rel_property"]."\"] = \"".$rel["rel_method"]."\";\n";
			$relations_properties .= "\t\t\$this->relations[\"lazyload\"][\"".$rel["rel_property"]."\"] = \"".($rel["rel_lazyload"] == 1 ? "true" : "false")."\";\n";
			
			$relations_functions .= "\tpublic function ".$rel["rel_method"]."(){\n";
			$relations_functions .= "\t\tif(\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] != null) return \$this->relations[\"properties\"][\"".$rel["rel_property"]."\"];\n";
			if( $rel["rel_type"] == "belongs_to" ) {
				$relations_functions .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = new ".$rel["rel_object"]."(\$this->".$rel["rel_field"].");\n";
			} else if ( $rel["rel_type"] == "has_many" ) {
				$relations_functions .= "\t\t\$pk = \$this->dbPk;\n";
				$relations_functions .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = ".$rel["rel_object"]."ControlBase::GetWhere(array(\"".$rel["rel_field"]."\" => \$this->\$pk));\n";
			}
			$relations_functions .= "\t\treturn \$this->relations[\"properties\"][\"".$rel["rel_property"]."\"];\n";
			$relations_functions .= "\t}\n";

			if( $rel["rel_type"] == "belongs_to" ) {
				$obj_var = "\$".strtolower($rel["rel_property"]);
				$relations_functions .= "\tpublic function Set".$rel["rel_property"]."(".$obj_var."){\n";
				$relations_functions .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = ".$obj_var.";\n";
				$relations_functions .= "\t\t\$this->".$rel["rel_field"]." = ".$obj_var."->GetID();\n";
				$relations_functions .= "\t\treturn \$this;\n";
				$relations_functions .= "\t}\n";
			}

			if($rel["rel_autoload"] == 1){
				array_push($relations_autoload, "\"".$rel["rel_property"]."\" => \"".$rel["rel_field"]."\"");
				array_push($autoload_objs, $rel["rel_property"]);
			}

		} // close foreach relations
	
		$code = "<?php\n";
		$code .= $this->GetCommentAlert();
		if ($namespace) {
			$code .= "namespace ".$namespace.";\n\n";
		}
		$code .= "use Magrathea2\iMagratheaModel;\n";
		$code .= "use Magrathea2\MagratheaModel;\n\n";


		$code .= "class ".$object."Base extends MagratheaModel implements iMagratheaModel {\n\n";
		
		$code .= "\tpublic \$".implode(", $", $obj_fields).";\n";
		$code .= "\tpublic \$created_at, \$updated_at;\n";
		$code .= "\tprotected \$autoload = ".(count($relations_autoload) == 0 ? "null" : "array(".implode(", ", $relations_autoload).")").";\n";
		if(count($autoload_objs) > 0) {
			$code .= "\tpublic \$".implode(", $", $autoload_objs).";\n";
		}
		$code .= "\n";

		$code .= "\tpublic function __construct( ".( ($data["db_pk"]) ? " \$".$data["db_pk"]."=0 " : "\$id=0" )." ){ \n";
		$code .= "\t\t\$this->MagratheaStart();\n";
		if($data["db_pk"]){
			$code .= "\t\tif( !empty(\$".$data["db_pk"].") ){\n";
			$code .= "\t\t\t\$pk = \$this->dbPk;\n";
			$code .= "\t\t\t\$this->\$pk = \$".$data["db_pk"].";\n";
			$code .= "\t\t\t\$this->GetById(\$".$data["db_pk"].");\n";
			$code .= "\t\t}\n";
		}
		$code .= "\t}\n";
		$code .= "\tpublic function MagratheaStart(){\n";
		$code .= "\t\t\$this->dbTable = \"".$data["table_name"]."\";\n";
		$code .= "\t\t\$this->dbPk = \"".$data["db_pk"]."\";\n";
		foreach($obj_fields as $f){
			$code .= "\t\t\$this->dbValues[\"".$f."\"] = \"".$data[$f."_type"]."\";\n";
			if( !empty($data[$f."_alias"]) )
				$code .= "\t\t\$this->dbAlias[\"".$data[$f."_alias"]."\"] = \"".$f."\";\n";
		}

		$code .= "\n".$relations_properties;
		$code .= "\t\t\$this->dbValues[\"created_at\"] =  \"datetime\";\n";
		$code .= "\t\t\$this->dbValues[\"updated_at\"] =  \"datetime\";\n";			
		$code .= "\n";
		$code .= "\t}\n\n";

		$code .= "\t// >>> relations:\n".$relations_functions."\n";

		$code .= "}\n";
		return $code;
	}

	/**
	 * Generate Base Code for object
	 * @param 	string 		$object			object name
	 * @param 	array			$data				array with magrathea_conf data for object
	 * @param 	string 		$namespace	(optional) namespace for class code
	 * @return 	string		code
	 */
	private function GenerateBaseCodeForObjectControl($object, $data, $namespace=null) {
		$code = "";
		$code = "<?php\n";
		$code .= $this->GetCommentAlert();
		if ($namespace) {
			$code .= "namespace ".$namespace.";\n\n";
		}
		$code .= "use Magrathea2\MagratheaModelControl;\n\n";

		$code .= "class ".$object."ControlBase extends MagratheaModelControl {\n";
			$code .= "\tprotected static \$modelNamesapce = \"".$namespace."\";\n";
			$code .= "\tprotected static \$modelName = \"".$object."\";\n";
			$code .= "\tprotected static \$dbTable = \"".$data["table_name"]."\";\n";
		$code .= "}\n\n";
		return $code;
	}

	/**
	 * Generate Code for object
	 * @param 	string 		$object		object name
	 * @param 	string 		$namespace	(optional) namespace for class code
	 * @return 	string		code
	 */
	private function GenerateCodeForObject($object, $namespace=null) {
		$code = "<?php\n";
		$code .= "include(__DIR__.\"/".$object."ModelBase.php\");\n\n";

		if ($namespace) {
			$code .= "namespace ".$namespace.";\n\n";
		}

		$code .= "use Magrathea2\MagratheaModelControl;\n\n";

		$code .= "class ".$object." extends ".$object."Base {\n";
		$code .= "\t// model code goes here!\n";
		$code .= "}\n\n";
		return $code;
	}

	/**
	 * Generate Code for object
	 * @param 	string 		$object		object name
	 * @param 	string 		$namespace	(optional) namespace for class code
	 * @return 	string		code
	 */
	private function GenerateCodeForObjectControl($object, $namespace=null) {
		$code = "<?php\n";
		$code .= "include(__DIR__.\"/".$object."ModelBase.php\");\n\n";

		if ($namespace) {
			$code .= "namespace ".$namespace.";\n\n";
		}

		$code .= "use Magrathea2\MagratheaModelControl;\n\n";

		$code .= "class ".$object."Control extends ".$object."ModelControlBase {\n";
		$code .= "\t// model code goes here!\n";
		$code .= "}\n\n";
		return $code;
	}

	/**
	 * @param 	string 	$object	object name
	 * @return 	string	code
	 */
	public function GetCodeForObjectBase($object): string {
		$objectData = ObjectManager::Instance()->GetObjectData($object);
		$codeData = $this->GetCodeCreationData();
		if(!$codeData["success"]) {
			throw new MagratheaException("error generating code");
		}
		return $this->GenerateBaseCodeForObject($object, $objectData, $codeData["data"]["code-namespace"]);
	}
	/**
	 * @param 	string 	$object	object name
	 * @return 	string	code
	 */
	public function GetCodeForObjectControlBase($object): string {
		$objectData = ObjectManager::Instance()->GetObjectData($object);
		$codeData = $this->GetCodeCreationData();
		if(!$codeData["success"]) {
			throw new MagratheaException("error generating code");
		}
		return $this->GenerateBaseCodeForObjectControl($object, $objectData, $codeData["data"]["code-namespace"]);
	}
	/**
	 * @param 	string 	$object	object name
	 * @return 	string	code
	 */
	public function GetCodeForObject($object): string {
		$codeData = $this->GetCodeCreationData();
		if(!$codeData["success"]) {
			throw new MagratheaException("error generating code");
		}
		return $this->GenerateCodeForObject($object, $codeData["data"]["code-namespace"]);
	}
	/**
	 * @param 	string 	$object	object name
	 * @return 	string	code
	 */
	public function GetCodeForControl($object): string {
		$codeData = $this->GetCodeCreationData();
		if(!$codeData["success"]) {
			throw new MagratheaException("error generating code");
		}
		return $this->GenerateCodeForObjectControl($object, $codeData["data"]["code-namespace"]);
	}

	/**
	 * @param 	string 	$object	object name
	 * @return 	array		["code", "overwritable", "file-exists", "file-destination"]
	 */
	public function PrepareCodeFileGeneration($type, $object): array {
		$list = $this->GetFileList($object);
		$fileData = @$list[$type];
		if (!$type || !$fileData) {
			throw new MagratheaException("incorrect type for code generation: [".$type."]");
		}
		$structureData = $this->PrepareStructureForCodeGeneration($object);
		$fileDestination = $structureData["code-destination"]."/".$fileData["file-name"];
		$fn = $fileData["gen-function"];
		$code = $this->$fn($object);
		return [
			"code" => $code,
			"file-exists" => file_exists($fileDestination),
			"overwritable" => ($type == "model-base" || $type == "control-base") ? true : false,
			"file-destination" => $fileDestination,
		];
	}

	/**
	 * @param 	string 		$type 		file type ("model-base", "control-base", "model", "control")
	 * @param 	string		$obj			object name
	 * @return 	array			[ ["success", "file-name", "error?"]* ]
	 */
	public function WriteCodeFile($type, $obj) {
		$fileData = $this->PrepareCodeFileGeneration($type, $obj);
		$file = $fileData["file-destination"];
		$content = $fileData["code"];
		$overwrite = $fileData["overwritable"];
		try {
			$w = $this->WriteFile($file, $content, $overwrite);
		} catch(Exception $ex) {
			throw $ex;
		}
		$rs = [
			"success" => $w["success"],
			"overwrite" => @$w["overwrite"],
			"type" => $type,
			"file-name" => $file,
		];
		if(!$w["success"]) $rs["error"] = $w["error"];
		return $rs;
	}

	/**
	 * Get data for generating a code file
	 * @param			string			object name
	 * @return 		array				data
	 */
	public function PrepareStructureForCodeGeneration($object) {
		$codeData = $this->GetCodeCreationData();
		if(!$codeData["success"]) {
			throw new MagratheaException("Could not create code for ".$object, 400);
		}
		$rs = [];
		$data = $codeData["data"];
		$codePath = $data["code-path"];
		$rs["structure"] = $data["code-structure"];
		$rs["namespace"] = $data["code-namespace"];
		if($rs["structure"] == "feature") {
			$rs["features-path"] = $codePath."/features";
			$rs["code-destination"] = $rs["features-path"]."/".$object;
			$rs["is-writable"] = is_writable($rs["code-destination"]);
		}
		$rs["code-path"] = $codePath;
		return $rs;
	}

	/**
	 * Create Folders for object
	 * @param			string			object name
	 * @return 		array				data ["success", "data"]
	 */
	public function PrepareFolders($object) {
		$data = $this->PrepareStructureForCodeGeneration($object);
		$rs = [];
		$codeData = [];
		$codeData["path"] = $data["code-path"];
		$codeData["exists"] = is_dir($data["code-path"]);
		$codeData["writable"] = is_writable($data["code-path"]);
		$rs["base"] = $codeData;
		if($data["structure"] == "feature") {
			$featuresData = [];
			$featuresData["path"] = $data["features-path"];
			if(!is_dir($data["features-path"])){
				$featuresData["created"] = @mkdir($data["features-path"]);
			} else {
				$featuresData["exists"] = true;
			}
			$featuresData["writable"] = is_writable($data["features-path"]);
			$rs["features"] = $featuresData;

			$objectData = [];
			$objectData["path"] = $data["code-destination"];
			if(!is_dir($data["code-destination"])){
				$objectData["created"] = @mkdir($data["code-destination"]);
			} else {
				$objectData["exists"] = true;
			}
			$objectData["writable"] = is_writable($data["code-destination"]);
			$rs["object"] = $objectData;
		}
		return $rs;
	}

	/**
	 * Writes a file with some content (code, please)
	 * @param		string 		$file				file that will be written
	 * @param		string		$content		content to be written
	 * @param 	boolean 	$overwrite	should we overwrite whater is in the file?
	 * @return 	array			["success", "error?", "data?"]
	 */
	function WriteFile($file, $content, $overwrite=false){
		$file_existed = false;
		if(file_exists($file)){
			$file_existed = true;
			if($overwrite) {
				unlink($file);
			} else {
				return ["success" => false, "error" => "file already exists"];
			}
		}
		if (!$handle = @fopen($file, 'w')) { 
			return ["success" => false, "error" => "could not open file", "data" => $handle];
		} 
		if (!fwrite($handle, $content)) { 
			return ["success" => false, "error" => "could not write file", "data" => $handle];
		} 
		fclose($handle); 
		return ["success" => true, "overwrite" => $file_existed];
	}

}
